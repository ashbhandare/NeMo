run:
  name: ptune_5b
  time_limit: "04:00:00"
  dependency: "singleton"
  convert_name: convert_nemo
  model_train_name: gpt3_5b
  convert_dir: "/NeMo/ptuneing_fp8_scripts/5b"
  task_name: "squad"
  results_dir: "/NeMo/ptuneing_fp8_scripts/5b"

trainer:
  devices: 8
  num_nodes: 1
  accelerator: gpu
  precision: bf16
  logger: False
  enable_checkpointing: False
  replace_sampler_ddp: False
  max_epochs: 1
  max_steps: -1
  log_every_n_steps: 1
  val_check_interval: 100
  accumulate_grad_batches: 1
  gradient_clip_val: 1.0
  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.
  
exp_manager:
  explicit_log_dir: null
  exp_dir: null
  name: megatron_gpt_prompt
  create_wandb_logger: False
  wandb_logger_kwargs:
    project: nemo_gpt3_prompt
    name: "175_ptune"
  resume_if_exists: False
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: val_loss
    save_top_k: 5
    mode: min
    save_nemo_on_train_end: False
    filename: "megatron_gpt_prompt_learn--{val_loss:.3f}-{step}"
    model_parallel_size: 64
    save_best_model: True

model:
  config_path: "/NeMo/ptuneing_fp8_scripts/5b/5b.yaml"

  activations_checkpoint_granularity: selective
  activations_checkpoint_method: uniform
  activations_checkpoint_num_layers: null
  seed: 1234
  nemo_path: "" # the place to save prompt learning nemo checkpoint
  virtual_prompt_style: 'p-tuning' # One of 'p-tuning', 'prompt-tuning', or 'inference'. We recommend 'p-tuning' over 'prompt-tuning'.
  tensor_model_parallel_size: 2
  pipeline_model_parallel_size: 1
  model_parallel_size: 8
  encoder_seq_length: 2048
  global_batch_size: 64
  micro_batch_size: 8

  restore_path: null # used to restore from a prompt tuned checkpoint and add new tasks
  language_model_path: null # Restore lanugage model from pre-trained .nemo checkpoint
  #language_model_path: /lustre/fsw/bignlp/jiemingz/results/megatron_gpt.nemo # Restore lanugage model from pre-trained .nemo checkpoint
  existing_tasks: [] # if restore from a prompt tuned checkpoint and add new tasks, existing task names should be included here.
  new_tasks: ["squad"] # multiple tasks can be tuned at the same time

  ## Sequence Parallelism
  # Makes tensor parallelism more memory efficient for LLMs (20B+) by parallelizing layer norms and dropout sequentially
  # See Reducing Activation Recomputation in Large Transformer Models: https://arxiv.org/abs/2205.05198 for more details.
  sequence_parallel: False

  task_templates: # task_templates for all existing_tasks and new_tasks are required.
  - taskname: "squad" # The task name
    prompt_template: "<|VIRTUAL_PROMPT_0|>Context: {context} Question: {question} Answer: {answer}" # Prompt template for task, specify virtual prompt positions with <|VIRTUAL_PROMPT_#|>
    total_virtual_tokens: 10 # Sum of tokens in virtual_token_splits must add to this number. Can differ between new and existing tasks, but must match across all new tasks being tuned at the same time.
    virtual_token_splits: [10] # number of virtual tokens to be inserted at each VIRTUAL PROMPT location, must add to total_virtual_tokens
    truncate_field: "context" # The {field} in the prompt template whose text will be truncated if the input is too long, if null, inputs that are too long will just be skipped.
    answer_field: "answer" # Answer/Target field
    answer_only_loss: True # If true, the loss will only be calculated with answer_field text vs. ground truth. If false, the loss will be calculated over entire sentence.

  prompt_learning: # Prompt tunin specific params
    new_prompt_init_methods: null # e.g ['text'], List of 'text' or 'random', should correspond to tasks listed in new tasks
    new_prompt_init_text: null # e.g ['some init text goes here'], some init text if init method is text, or None if init method is random

  p_tuning: # P-tuning specific params
    encoder_type: "tpmlp" # ['tpmlp', 'lstm', 'biglstm', 'mlp'] 
    dropout: 0.0
    num_layers: 2  # number of layers for MLP or LSTM layers. Note, it has no effect for tpmlp currently as it always assumes it is two layers.
    encoder_hidden: 2048 # encoder hidden for biglstm and tpmlp
    init_std: 0.023  # init std for tpmlp layers

  data:
    train_ds:
    - /datasets/tasks/prompt-learning-data/squad/squad_train.jsonl
    validation_ds:
    - /datasets/tasks/prompt-learning-data/squad/squad_val.jsonl
    add_eos: True
    shuffle: True
    num_workers: 0
    pin_memory: True
    load_cache: True
    train_cache_data_path: /NeMo/ptuneing_fp8_scripts/5b/storygen_train_cache.pickle
    validation_cache_data_path: /NeMo/ptuneing_fp8_scripts/5b/storygen_validation_cache.pickle

  # Nsys profiling options
  nsys_profile:
    enabled: True
    trace: [nvtx,cuda]
    start_step: 10  # Global batch to start profiling
    end_step: 10 # Global batch to end profiling
    ranks: [0] # Global rank IDs to profile
    gen_shape: False # Generate model and kernel details including input shapes

  optim:
    name: fused_adam
    lr: 2.0e-4
    weight_decay: 0.01
    betas:
    - 0.9
    - 0.98
    sched:
      name: CosineAnnealing
      warmup_steps: 50
      constant_steps: 10
      min_lr: 0.0 # has to be zero
      monitor: val_loss
      reduce_on_plateau: false
